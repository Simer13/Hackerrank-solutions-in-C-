<1> Conditional Statements in C

Task
Given a positive integer denoting , do the following:

If , print the lowercase English word corresponding to the number (e.g., one for , two for , etc.).
If , print Greater than 9.

Input Format
The first line contains a single integer, .

Output Format
If , then print the lowercase English word corresponding to the number (e.g., one for , two for , etc.); otherwise, print Greater than 9 instead.

Sample Input
5

Sample Output
five

Sample Input #01
8

Sample Output #01
eight

Sample Input #02
44

Sample Output #02
Greater than 9

#include <assert.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* readline();
int main()
{
    char* n_endptr;
    char* n_str = readline();
    int n = strtol(n_str, &n_endptr, 10);
    if (n_endptr == n_str || *n_endptr != '\0') { exit(EXIT_FAILURE); }
    // Write Your Code Here
        
    if(n>=1 && n<=9)
    {   if(n==1)
        printf("one");
        if(n==2)
        printf("two");
        if(n==3)
        printf("three");
        if(n==4)
        printf("four");
        if(n==5)
        printf("five");
        if(n==6)
        printf("six");
        if(n==7)
        printf("seven");
        if(n==8)
        printf("eight");
        if(n==9)
        printf("nine");
    }
    else
        printf("Greater than 9");
    return 0;
}
char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;
    char* data = malloc(alloc_length);
    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);
        if (!line) { break; }
        data_length += strlen(cursor);
        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') { break; }
        size_t new_length = alloc_length << 1;
        data = realloc(data, new_length);
        if (!data) { break; }
        alloc_length = new_length;
    }
    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';
    }
    data = realloc(data, data_length);
    return data;
}


<2> Palindromic Prime Number 1

In number theory, a palindromic prime number is a positive integer where the number is both palindrome number as well as prime number. You are given an integer n. Print "YES" (without quotes) if the given number is palindromic prime number, print "NO" (without quotes) otherwise.

Input Format
The only line of input contains an integer n.

Constraints
1 <= n <= 10000

Output Format
Print "YES" (without quotes) if the given number is palindromic prime number, print "NO" (without quotes) otherwise.

Sample Input 0
121

Sample Output 0
NO

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int is_prime(int n){
  int i;
  for (i = 2; i < n/2+1; i++) {
    if (n%i == 0){
        return 0;
      }
  }
  return 1;
}


int is_palindrome(int n)
{
  char s[10];
  sprintf(s, "%d", n);
  int i, last;
  last = strlen(s);

  for(i = 0; i < last; i++)
    {
      if(s[i] != s[last - i - 1])
        {
          return 0;
        }
    }
  return 1;
}


int main(int argc, char *argv[])
{
  int i;
  for (i = 999; i >= 2; i--) {
    if(is_prime(i) && is_palindrome(i)){
      printf("%d\n", i);
      break;
    }
  }
  return 0;
}
